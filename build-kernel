#!/usr/bin/env bash

# Copyright (C) 2018 Akhil Narang
# SPDX-License-Identifier: GPL-3.0-only
# Kernel build script

source "${HOME}/scripts/functions";

if [[ -z ${KERNELDIR} ]]; then
    echo -e "Please set KERNELDIR";
    exit 1;
fi

export DEVICE=whyred;
#if [[ -z ${DEVICE} ]]; then
#    export DEVICE="whyred";
#fi

# These won't change
export SRCDIR="${KERNELDIR}/${DEVICE}";
export OUTDIR="${KERNELDIR}/${DEVICE}/obj";
export ANYKERNEL="${KERNELDIR}/anykernel/${DEVICE}";
export MODULES_DIR="${ANYKERNEL}/modules/vendor/lib/modules";
export ARCH="arm64";
export CCACHE="$(command -v ccache)";
export CLANG_DIR="${HOME}/clang-build/build";
export GCC_DIR="${HOME}/build-tools-gcc/aarch64-linux-gnu";
export CROSS_COMPILE="${GCC_DIR}/bin/aarch64-linux-gnu-";
export CLANG_TRIPLE="aarch64-linux-gnu-";
export CC="${CLANG_DIR}/bin/clang";
export KBUILD_COMPILER_STRING=$(${CC} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
export DEFCONFIG="${DEVICE}_defconfig";
export ZIP_DIR="${KERNELDIR}/files/${DEVICE}";
export IMAGE="${OUTDIR}/arch/${ARCH}/boot/Image.gz-dtb";
export DOWNLOAD_BASE_URL_1="https://downloads.akhilnarang.me/kernel/${DEVICE}/Test/";
export DOWNLOAD_BASE_URL_2="https://mirror.akhilnarang.me/kernel/${DEVICE}/Test/";

if [[ -z "${JOBS}" ]]; then
    JOBS="$(grep -c '^processor' /proc/cpuinfo)";
    export JOBS;
fi

if [[ ! -d "${ANYKERNEL}" ]]; then
    git clone AnyKernel2 -b "${DEVICE}" "${ANYKERNEL}";
fi

export MAKE="make O=${OUTDIR}";

if [[ -z "${NAME}" ]]; then
    export NAME="derp";
fi
NAME="${NAME}-${DEVICE}-$(date +%Y%m%d-%H%M)";
export NAME;
export ZIPNAME="${NAME}.zip"
export FINAL_ZIP="${ZIP_DIR}/${ZIPNAME}"

[ ! -d "${ZIP_DIR}" ] && mkdir -pv "${ZIP_DIR}"
[ ! -d "${OUTDIR}" ] && mkdir -pv "${OUTDIR}"

cd "${SRCDIR}" || exit;
rm -fv "${IMAGE}";

if [[ "$@" =~ "mrproper" ]]; then
    ${MAKE} mrproper
fi

if [[ "$@" =~ "clean" ]]; then
    ${MAKE} clean
fi

${MAKE} $DEFCONFIG || (echo "Failed to build with ${DEFCONFIG}, exiting!" && \
		exit 1);

START=$(date +"%s");
sendTG kronic derp md "Building!";
if [[ "$@" =~ "quiet" ]]; then
    ${MAKE} -j"${JOBS}" CC="$(command -v ccache) ${CC}" CLANG_TRIPLE="${CLANG_TRIPLE}" |& ag -ia "error:|warning:"
else
    ${MAKE} -j"${JOBS}" CC="$(command -v ccache) ${CC}" CLANG_TRIPLE="${CLANG_TRIPLE}";
fi
exitCode="$?";
END=$(date +"%s")
DIFF=$((END - START))
echo -e "Build took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds.";

if [[ ! -f "${IMAGE}" ]]; then
    echo -e "Build failed :P";
    sendTG kronic derp md "Build failed!";
    exit 1;
else
    echo -e "Build Succesful!";
fi

echo -e "Copying kernel image";
cp -v "${IMAGE}" "${ANYKERNEL}/";

grep -q "=m" ${OUTDIR}/.config;
if [[ "$?" -eq 0 ]]; then
    find ${OUTDIR} -name "*.ko" -exec cp -v {} ${MODULES_DIR} \;
    for module in $(ls ${MODULES_DIR/*.ko}); do
  		${CROSS_COMPILE}strip --strip-unneeded "${MODULES_DIR}/${module}";
  	done
fi # Modules check
cd - || exit;
cd "${ANYKERNEL}" || exit;
zip -r9 "${FINAL_ZIP}" *;
cd - || exit;

if [ -f "$FINAL_ZIP" ];
then
echo -e "$NAME zip can be found at $FINAL_ZIP";
if [[ "$@" =~ "transfer" ]]; then
    echo -e "Uploading ${ZIPNAME} to https://transfer.sh/";
    transfer "${FINAL_ZIP}";
fi
if [[ "$@" =~ "upload" ]]; then
    echo -e "Uploading ${ZIPNAME}";
    rsync -av --progress --delete ${ZIP_DIR} akhil@downloads.akhilnarang.me:/var/www/downloads.akhilnarang.me/kernel/${DEVICE}/Test/;
    rsync -av --progress --delete ${ZIP_DIR} akhil@mirror.akhilnarang.me:/var/www/mirror.akhilnarang.me/kernel/${DEVICE}/Test/;
    sendTG kronic derp md "Download ${ZIPNAME} from [Main](${DOWNLOAD_BASE_URL_1}) | [Mirror](${DOWNLOAD_BASE_URL_2})";
fi
else
echo -e "Zip Creation Failed =(";
fi # FINAL_ZIP check

exit ${exitCode};
