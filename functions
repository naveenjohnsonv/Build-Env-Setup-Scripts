#!/usr/bin/env bash

# Copyright (C) 2018 Akhil Narang
# SPDX-License-Identifier: GPL-3.0-only

# Script defining various functions used in the scripts across this repository

source ~/scripts/aliases

# Builds a package from the Arch User Repository
function aur() {
	git clone https://aur.archlinux.org/$1
	cd $1
	makepkg -si $2
	cd -
	rm -rf $1
}

# FORMATS THE TIME
function format_time() {
    MINS=$(((${1}-${2})/60))
    SECS=$(((${1}-${2})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

# Repopicks a | delimited set of commits
function repopick_stuff() {
	export oldifs=$IFS
	export IFS="|"
	for f in ${REPOPICK_LIST}; do
	    echo $f
	    repopick $f
	    [[ $? -ne 0 ]] && exit 1
	done
	export IFS=$oldifs
}

# Creates a virtualenv if required and activates it
function venv() {
    PYV=$(python -c "import sys;t='{v[0]}'.format(v=list(sys.version_info[:1]))\
            ;sys.stdout.write(t)")
    if [[ "${PYV}" == "3" ]]; then
        if [[ "$(command -v 'virtualenv2')" ]]; then
            virtualenv2 /tmp/venv
            source /tmp/venv/bin/activate
        else
            echo "Please install 'virtualenv2', or make 'python' point to \
                    python2"
        fi
    fi
}

# Deactivates a virtualenv and deletes the folder
function rmvenv() {
    if [[ -d "/tmp/venv/" ]]; then
        deactivate
        rm -rf /tmp/venv/bin/activate
    fi
}

# Uploads a given file to transfer.sh
function transfer() {
    file="$1"
    zipname=$(echo "${file}" | awk -F '/' '{print $NF}')
    destination="$2"
    url=$(curl -# -T "${file}" https://transfer.sh/${destination})
    printf '\n'
    echo -e "Download $zipname at $url"
}

# Calls venv(), runs the given command, and then calls rmvenv()
function run_virtualenv() {
	venv

    "$@"

    rmvenv
}

# Repo sync with various flags I'm lazy to type each time
function syncc() {
    time run_virtualenv repo sync --force-broken --force-sync --no-clone-bundle\
             --current-branch --no-tags "$@"
}

# Some git aliases for an easier workflow
function gitalias() {
	git config --global alias.s 'status'
	git config --global alias.p 'push'
	git config --global alias.pl 'pull'
	git config --global alias.f 'fetch'
	git config --global alias.r 'remote'
	git config --global alias.rv 'remote --verbose'
	git config --global alias.rev 'revert'
	git config --global alias.re 'reset'
	git config --global alias.cp 'cherry-pick'
	git config --global alias.cpc 'cherry-pick --continue'
	git config --global alias.cpa 'cherry-pick --abort'
	git config --global alias.rh 'reset --hard'
	git config --global alias.rs 'reset --soft'
	git config --global alias.rb 'rebase'
	git config --global alias.rbi 'rebase --interactive'
	git config --global alias.rbc 'rebase --continue'
	git config --global alias.rba 'rebase --abort'
	git config --global alias.rbs 'rebase --skip'
	git config --global alias.d 'diff'
	git config --global alias.dc 'diff --cached'
	git config --global alias.b 'bisect'
	git config --global alias.c 'commit'
	git config --global alias.cs 'commit --signoff'
	git config --global alias.ca 'commit --amend'
	git config --global alias.cn 'commit --no-edit'
	git config --global alias.gerrit 'push gerrit HEAD:refs/for/oreo-mr1'
	git config --global alias.add-change-id "!EDITOR='sed -i -re s/^pick/e/' sh -c 'git rebase -i $1 && while test -f .git/rebase-merge/interactive; do git commit --amend --no-edit && git rebase --continue; done' -"
}

# Function to display uptime of a system. All credits to the original author.
function upinfo() {
    echo -ne "${green}$(hostname) ${red}uptime is ${cyan} \\t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10,$11}'
}

# Function run on login to display some stuff and set my custom PS1
function onLogin() {
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export GIT_PS1_SHOWCOLORHINTS=1
    unset PS1
    #PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
    if [[ -f "${HOME}/git-prompt.sh" ]]; then
        source ~/git-prompt.sh
        PS1='| \h (\w)$(__git_ps1 " {%s}") |-> '
    else
        PS1='| \h (\w) |-> '
    fi
    clear
    HOST=$(hostname)
    if [[ ${#HOST} -lt 14 ]]; then
        echo -e "${lightgray}";figlet -c "$(hostname)"
    fi
    echo ""
    echo -ne "${red}Today is:\\t\\t${cyan} $(date)"
    echo ""
    echo -e "${red}Kernel Information: \\t${cyan} $(uname -smr)"
    echo -ne "${cyan}"
    upinfo
    echo ""
    echo -e "Welcome to $(hostname), $(whoami)!"
    echo -e
    fortune
}

# Sends messages to Telegram to a specified chat via the desired bot
function sendTG() {
    bot=${1}
    shift
    chat=${1}
    shift
    parse_mode=${1}
    shift
    case ${bot} in
        "ts")
            BOT_API_KEY="$(cat ~/.tskey)"
        ;;
        "kronic")
            BOT_API_KEY="$(cat ~/.kronickey)"
        ;;
        "rr")
            BOT_API_KEY="$(cat ~/.rrkey)"
        ;;
        *)
            echo -e "Invalid bot, must be one of ts|kronic|rr!"
            return
        ;;
    esac

    case ${chat} in
        "me")
            CHAT_ID="92027269"
        ;;
        "derp")
            CHAT_ID="-1001313293729"
        ;;
        "whyred")
            CHAT_ID="-1001183842368"
        ;;
        *)
            echo -e "Invalid chat, must be one of me|derp!"
            return
        ;;
    esac

    case ${parse_mode} in
        "markdown"|"Markdown"|"md")
            export parse_mode="Markdown"
        ;;
        "Html"|"html"|"HTML")
            export parse_mode="HTML"
        ;;
        *)
            echo -e "Invalid parse mode, must be one of Markdown|HTML!"
            return
        ;;
    esac

    curl -s "https://api.telegram.org/bot${BOT_API_KEY}/sendMessage" --data "text=${@}&chat_id=${CHAT_ID}&parse_mode=${parse_mode}" 1>/dev/null
    echo
}
